{
    "AWSTemplateFormatVersion": "2010-09-09",
    "Description": "Create a server to deploy applications. This server is created with autoscaling group and an ELB",
    "Mappings": {
        "RegionMap": {
            "eu-west-1": {
                "hvm": "ami-9cbe9be5"
            }
        },
        "constants": {
      		"tags": {
        		"type": "AppServer"
      		}
    	}
    },
    "Parameters": {
        "ParentVPCStackName": {
            "Description": "Parent VPC stack to inherit values from (VPCID, CIDR, Endpoint IDs, etc...)",
            "Type": "String",
            "Default": "VPC"
        },
        "ParentSubnetStackName": {
            "Description": "Parent Subnet stack name",
            "Type": "String",
            "Default": "SUBNETS"
        },
        "ParentJumpboxStackName": {
            "Description": "Parent EC2 Jumpbox stack name",
            "Type": "String",
            "Default": "JUMPBOX"
        },
        "AZ": {
            "AllowedValues": [
                "eu-west-1a",
                "eu-west-1b",
                "eu-west-1c"
                ],
            "ConstraintDescription": "Must be a valid AWS availability zone",
            "Default": "eu-west-1a",
            "Description": "AvailabilityZone",
            "MinLength": "1",
            "Type": "String"
        },
        "EnvironmentName": {
            "Default": "AppServer",
            "Description": "Environment name of this platform",
            "MinLength": "1",
            "Type": "String"
        },
        "InboundAccessIP": {
            "AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
            "ConstraintDescription": "Must be a valid IP CIDR range of the form x.x.x.x/32",
            "Default": "194.31.103.34/32",
            "Description": "IP address or CIDR subnet allowed inbound access to the application server. Use CDIR notation (for example 194.31.103.34/32)",
            "MaxLength": "18",
            "MinLength": "9",
            "Type": "String"
        },
        "InstanceType": {
            "AllowedValues": [
                "t1.micro",
                "t2.micro",
                "t2.small",
                "t2.medium",
                "m1.small",
                "m1.medium",
                "m1.large",
                "m1.xlarge",
                "m2.xlarge",
                "m2.2xlarge",
                "m2.4xlarge",
                "m3.medium",
                "m3.large",
                "m3.xlarge",
                "m3.2xlarge",
                "c1.medium",
                "c1.xlarge",
                "c3.large",
                "c3.xlarge",
                "c3.2xlarge",
                "c3.4xlarge",
                "c3.8xlarge",
                "c4.large",
                "c4.xlarge",
                "c4.2xlarge",
                "c4.4xlarge",
                "c4.8xlarge",
                "g2.2xlarge",
                "r3.large",
                "r3.xlarge",
                "r3.2xlarge",
                "r3.4xlarge",
                "r3.8xlarge",
                "i2.xlarge",
                "i2.2xlarge",
                "i2.4xlarge",
                "i2.8xlarge",
                "hi1.4xlarge",
                "hs1.8xlarge",
                "cr1.8xlarge",
                "cc2.8xlarge",
                "cg1.4xlarge"
            ],
            "ConstraintDescription": "Must be a valid EC2 instance type.",
            "Default": "t2.small",
            "Description": "AppServer EC2 instance type",
            "MinLength": "1",
            "Type": "String"
        },
        "OperatorEmail": {
            "Default": "operator@example.com",
            "Description": "Email address to notify if there are any scaling operations",
            "MinLength": "1",
            "Type": "String"
        },
        "RootVolumeIops": {
            "ConstraintDescription": "must be between 1 and 4000",
            "Default": "100",
            "Description": "Root Volume iops",
            "MaxValue": "4000",
            "MinValue": "1",
            "Type": "Number"
        },
        "RootVolumeSize": {
            "ConstraintDescription": "must be between 10 and 1024",
            "Default": "20",
            "Description": "Root Volume Size",
            "MaxValue": "1024",
            "MinValue": "10",
            "Type": "Number"
        },
        "RootVolumeType": {
            "AllowedValues": [
                "standard",
                "io1",
                "gp2"
            ],
            "ConstraintDescription": "standard, io1 or gp2",
            "Default": "gp2",
            "Description": "Root Volumes type",
            "MinLength": "1",
            "Type": "String"
        },
        "VolumeSize": {
            "ConstraintDescription": "must be between 10 and 1024",
            "Default": "20",
            "Description": "Volume Size",
            "MaxValue": "1024",
            "MinValue": "10",
            "Type": "Number"
        },
        "Stage": {
            "AllowedValues": [
                "poc",
                "dev",
                "ci",
                "pre",
                "prod"
            ],
            "Default": "dev",
            "Description": "Stage for the environment",
            "MinLength": "1",
            "Type": "String"
        },
        "Version": {
            "AllowedPattern": "(\\d+)\\.(\\d+)(\\.\\d+)?-(\\d+)",
            "Default": "1.0.0-000",
            "Description": "Version to deploy. Must be specified as X.Y.Z-000",
            "Type": "String"
        },
        "AnsibleVaultPassword": {
          "Default": "foo",
          "Description": "Password for decripting Ansible's vault file",
          "NoEcho": "true",
          "Type": "String"
        }
    },
    "Conditions": {
        "root_use_iops": {
            "Fn::Equals": [
                {
                    "Ref": "RootVolumeType"
                },
                "io1"
            ]
        }
    },
    "Resources": {
        "AutoScalingGroup": {
            "Properties": {
                "AvailabilityZones": [
                    {
                        "Ref": "AZ"
                    }
                ],
                "HealthCheckGracePeriod": "900",
                "HealthCheckType": "ELB",
                "LaunchConfigurationName": {
                    "Ref": "LaunchConfig"
                },
                "NotificationConfigurations" : [
                    {
                        "NotificationTypes" : [ "autoscaling:EC2_INSTANCE_LAUNCH",
                                                "autoscaling:EC2_INSTANCE_LAUNCH_ERROR",
                                                "autoscaling:EC2_INSTANCE_TERMINATE",
                                                "autoscaling:EC2_INSTANCE_TERMINATE_ERROR",
                                                "autoscaling:TEST_NOTIFICATION" ],
                        "TopicARN" : { "Ref" : "AlarmNotificationTopic" }
                    }
                ],
                "TargetGroupARNs": [
                    { 
                        "Ref": "TargetGroup" 
                    }
                ],
                "MaxSize": "1",
                "MinSize": "1",
                "MetricsCollection": [
                 {
                  "Granularity": "1Minute",
                  "Metrics": [
                    "GroupInServiceInstances"
                  ]
                 }
                ],
                "Tags": [
                    {
                        "Key": "Name",
                        "PropagateAtLaunch": "true",
                        "Value": {
                            "Fn::Join" : [ "-", [ { "Ref": "EnvironmentName" }, "worker" ] ]
                        }
                    },
                    {
                        "Key": "stage",
                        "PropagateAtLaunch": "true",
                        "Value": {
                            "Ref": "Stage"
                        }
                    },
                    {
                        "Key": "type",
                        "PropagateAtLaunch": "true",
                        "Value": {
                            "Fn::FindInMap": [
                                "constants",
                                "tags",
                                "type"
                            ]
                        }
                    },
                    {
                        "Key": "version",
                        "PropagateAtLaunch": "true",
                        "Value": {
                            "Ref": "Version"
                        }
                    },
                    {
                        "Key": "environment",
                        "PropagateAtLaunch": "true",
                        "Value": {
                            "Ref": "EnvironmentName"
                        }
                    }
                ],
                "VPCZoneIdentifier": [
                    {
                    "Fn::ImportValue": {
                        "Fn::Join": [
                        "-",
                        [
                            {
                            "Ref": "ParentSubnetStackName"
                            },
                            "PrivateSubnet1ID"
                        ]
                        ]
                    }
                    }
                ]
            },
            "Type": "AWS::AutoScaling::AutoScalingGroup"
        },
        "LaunchConfig": {
            "Metadata": {
                "AWS::CloudFormation::Authentication": {
                    "S3AccessCreds": {
                        "type": "S3",
                        "roleName": {
                            "Ref": "AppServerRole"
                        }
                    }
                },
                "AWS::CloudFormation::Init": {
                    "config": {
                        "files": {
                            "/etc/sudoers.d/ec2-usetty": {
                                "content": "Defaults:ec2-user !requiretty\n",
                                "group": "root",
                                "mode": "000640",
                                "owner": "root"
                            },
                            "/home/ec2-user/.ssh/authorized_keys": {
                                "content": {
                                    "Fn::ImportValue": {
                                        "Fn::Join": [
                                            "-",
                                            [
                                                {
                                                    "Ref": "ParentJumpboxStackName"
                                                },
                                                "SSHPublicKey"
                                            ]
                                        ]
                                    }
                                },
                                "mode": "000600",
                                "owner": "ec2-user",
                                "group": "ec2-user"
                              },
                            "/home/ec2-user/.ssh/id_rsa": {
                                "source": {
                                    "Fn::ImportValue": {
                                        "Fn::Join": [
                                            "-",
                                            [
                                                {
                                                    "Ref": "ParentJumpboxStackName"
                                                },
                                                "KeyURI"
                                            ]
                                        ]
                                    }
                                },
                                "group": "ec2-user",
                                "mode": "000600",
                                "owner": "ec2-user",
                                "authentication": "S3AccessCreds"
                            },
                            "/home/ec2-user/.ssh/known_hosts": {
                                "source": {
                                    "Fn::ImportValue": {
                                        "Fn::Join": [
                                            "-",
                                            [
                                                {
                                                    "Ref": "ParentJumpboxStackName"
                                                },
                                                "KnownHostsURI"
                                            ]
                                        ]
                                    }
                                },
                                "group": "ec2-user",
                                "mode": "000600",
                                "owner": "ec2-user",
                                "authentication": "S3AccessCreds"
                            }
                        }
                    }
                }
            },
            "Properties": {
                "AssociatePublicIpAddress": "false",
                "BlockDeviceMappings": [
                    {
                        "DeviceName": "/dev/xvda",
                        "Ebs": {
                            "Iops": {
                                "Fn::If": [
                                    "root_use_iops",
                                    {
                                        "Ref": "RootVolumeIops"
                                    },
                                    {
                                        "Ref": "AWS::NoValue"
                                    }
                                ]
                            },
                            "VolumeSize": {
                                "Ref": "RootVolumeSize"
                            },
                            "VolumeType": {
                                "Ref": "RootVolumeType"
                            }
                        }
                    }
                ],
                "IamInstanceProfile": {
                    "Ref": "AppServerProfile"
                },
                "ImageId": {
                    "Fn::FindInMap": [
                        "RegionMap",
                        {
                            "Ref": "AWS::Region"
                        },
                        "hvm"
                    ]
                },
                "InstanceType": {
                    "Ref": "InstanceType"
                },
                "SecurityGroups": [
                    {
                        "Ref": "AppServerSecurityGroup"
                    }
                ],
                "UserData": {
                    "Fn::Base64": {
                        "Fn::Join": [
                            "",
                            [
                                "Content-Type: multipart/mixed; boundary=\"===============3585321300151562773==\"\n",
                                "MIME-Version: 1.0\n",
                                "\n",
                                "--===============3585321300151562773==\n",
                                "Content-Type: text/cloud-config; charset=\"us-ascii\"\n",
                                "MIME-Version: 1.0\n",
                                "Content-Transfer-Encoding: 7bit\n",
                                "Content-Disposition: attachment; filename=\"cloud.cfg\"\n",
                                "\n",
                                "#cloud-config\n",
                                "repo_upgrade: none\n",
                                "\n",
                                "--===============3585321300151562773==\n",
                                "Content-Type: text/x-shellscript; charset=\"us-ascii\"\n",
                                "MIME-Version: 1.0\n",
                                "Content-Transfer-Encoding: 7bit\n",
                                "Content-Disposition: attachment; filename=\"script.sh\"\n",
                                "\n",
                                "#!/bin/bash\n",
                                "set -e\n",
                                "touch /tmp/userdata-running\n",
                                "################## ATTACHING VOLUME ###############\n",
                                "instanceID=`curl http://169.254.169.254/latest/meta-data/instance-id/`\n",
                                "aws ec2 attach-volume --volume-id ",
                                {
                                  "Ref": "DataVolume"
                                },
                                " --instance-id $instanceID --device /dev/sdf --region ",
                                {
                                  "Ref": "AWS::Region"
                                },
                                " \n",
                                "################## CONFIGURING REPOSITORIES ##########\n",
                                "export stage=$(echo ",
                                {
                                  "Ref": "Stage"
                                },
                                ")\n",
                                "if [ ${stage} != 'prod' ] && [ ${stage} != 'pre' ] ; then\n",
                                  "export stage=ci\n",
                                "fi\n",
                                "################## INSTALL PACKAGES ##########\n",
                                "yum clean all\n",
                                "yum install -y git\n",
                                "yum install -y nginx && service nginx start\n",
                                "yum install -y python-pip\n",
                                "sudo pip install ansible==2.4.1\n",
                                "################## CONFIGURE HOSTNAME ##########\n",
                                "sed -i.bak 's/HOSTNAME=localhost.localdomain/HOSTNAME=",
                                { "Fn::Join" : [ "-", [ { "Ref": "EnvironmentName" }, "worker" ] ] },
                                ".localdomain/' /etc/sysconfig/network\n",
                                "echo '127.0.0.1 ",
                                { "Fn::Join" : [ "-", [ { "Ref": "EnvironmentName" }, "worker" ] ] },
                                " localhost.localdomain localhost' > /etc/hosts.tmp\n",
                                "mv -f /etc/hosts.tmp /etc/hosts\n",
                                "hostname ",
                                { "Fn::Join" : [ "-", [ { "Ref": "EnvironmentName" }, "worker" ] ] },
                                ".localdomain\n",
                                 "export MAJOR_VERSION=$(echo ",
                                {
                                  "Ref": "Version"
                                },
                                " | cut -d \".\" -f 1)\n",
                                "################## cfn-init ################\n",
                                "/opt/aws/bin/cfn-init --region ",
                                {
                                    "Ref": "AWS::Region"
                                },
                                "    -s ",
                                {
                                    "Ref": "AWS::StackName"
                                },
                                " -r LaunchConfig ",
                                "\n",
                                "################## Clone ansible repository ####################\n",
                                "################## Notify end of script ######################\n",
                                "/opt/aws/bin/cfn-signal -e $? \"",
                                {
                                    "Fn::Base64": {
                                        "Ref": "AppServerWaitHandle"
                                    }
                                },
                                "\"\n",
                                "--===============3585321300151562773==--"
                            ]
                        ]
                    }
                }
            },
            "Type": "AWS::AutoScaling::LaunchConfiguration"
        },
        "DataVolume" : {
            "Type" : "AWS::EC2::Volume",
            "Properties" : {
                "Size" : { 
                    "Ref": "VolumeSize" 
                },
                "AvailabilityZone" : { 
                    "Ref":  "AZ" 
                },
                "VolumeType" : "gp2",
                "Encrypted" : "True"
            }
        },
        "ELBListener": {
            "Type": "AWS::ElasticLoadBalancingV2::Listener",
            "Properties": {
                "DefaultActions": [{
                    "Type": "forward",
                    "TargetGroupArn": { 
                        "Ref": "TargetGroup" 
                    }
                 }],
              "LoadBalancerArn": { "Ref": "ELB" },
              "Port": 80,
              "Protocol": "HTTP"
            }
        },
        "TargetGroup": {
            "Type": "AWS::ElasticLoadBalancingV2::TargetGroup",
            "Properties": {
                "Name": { 
                    "Fn::Join": [ 
                        "-", 
                        [ 
                            { 
                                "Ref": "AWS::StackName" 
                            }, 
                            "TargetGroup" 
                        ] 
                    ] 
                },
                "Port": 80,
                "Protocol": "HTTP",
                "VpcId": {
                    "Fn::ImportValue": {
                        "Fn::Join": [
                            "-",
                            [
                                {
                                    "Ref": "ParentVPCStackName"
                                },
                                "VPCID"
                            ]
                        ]
                    }
                }
            },
            "DependsOn": [ "ELB" ]
        },     
        "ELB": {
            "Properties": {
                "SecurityGroups": [
                    {
                        "Ref": "ELBSecurityGroup"
                    }
                ],
                "Subnets": [
                    {
                        "Fn::ImportValue": {
                            "Fn::Join": [
                                "-",
                                [
                                    {
                                        "Ref": "ParentSubnetStackName"
                                    },
                                    "PublicSubnet1ID"
                                ]
                            ]
                        }
                    },
                    {
                        "Fn::ImportValue": {
                            "Fn::Join": [
                                "-",
                                [
                                    {
                                        "Ref": "ParentSubnetStackName"
                                    },
                                    "PublicSubnet2ID"
                                ]
                            ]
                        }
                    },
                    {
                        "Fn::ImportValue": {
                            "Fn::Join": [
                                "-",
                                [
                                    {
                                        "Ref": "ParentSubnetStackName"
                                    },
                                    "PublicSubnet3ID"
                                ]
                            ]
                        }
                    }
                ],
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": {
                            "Ref": "EnvironmentName"
                        }
                    },
                    {
                        "Key": "stage",
                        "Value": { "Ref": "Stage" }
                    },
                    {
                        "Key": "type",
                        "Value": { "Fn::FindInMap" : [ "constants", "tags", "type" ] }
                    },
                    {
                        "Key": "version",
                        "Value": { "Ref": "Version" }
                    },
                    {
                        "Key": "environment",
                        "Value": {
                            "Ref": "EnvironmentName"
                        }
                    }
                ]
            },
            "Type": "AWS::ElasticLoadBalancingV2::LoadBalancer"
        },
        "ELBSecurityGroup": {
            "Properties": {
                "GroupDescription": "Enable access to ELB TCP 80",
                "SecurityGroupIngress": [
                    {
                        "CidrIp": {
                            "Ref": "InboundAccessIP"
                        },
                        "FromPort": "80",
                        "IpProtocol": "tcp",
                        "ToPort": "80"
                    }
                ],
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": {
                            "Fn::Join" : [ "-", [ { "Ref": "EnvironmentName" }, "elb-sg" ] ]
                        }
                    },
                    {
                        "Key": "stage",
                        "Value": {
                            "Ref": "Stage"
                        }
                    },
                    {
                        "Key": "type",
                        "Value": {
                            "Fn::FindInMap": [
                                "constants",
                                "tags",
                                "type"
                            ]
                        }
                    },
                    {
                        "Key": "environment",
                        "Value": {
                            "Ref": "EnvironmentName"
                        }
                    }
                ],
                "VpcId": {
                    "Fn::ImportValue": {
                        "Fn::Join": [
                            "-",
                            [
                                {
                                    "Ref": "ParentVPCStackName"
                                },
                                "VPCID"
                            ]
                        ]
                    }
                }
            },
            "Type": "AWS::EC2::SecurityGroup"
        },
        "AppServerProfile": {
            "Properties": {
                "Path": "/",
                "Roles": [
                    {
                        "Ref": "AppServerRole"
                    }
                ]
            },
            "Type": "AWS::IAM::InstanceProfile"
        },
        "AppServerRole": {
            "Properties": {
                "AssumeRolePolicyDocument": {
                    "Statement": [
                        {
                            "Action": [
                                "sts:AssumeRole"
                            ],
                            "Effect": "Allow",
                            "Principal": {
                                "Service": [
                                    "ec2.amazonaws.com"
                                ]
                            }
                        }
                    ]
                },
                "Path": "/",
                "Policies": [
                    {
                        "PolicyName": "Access_to_keys",
                            "PolicyDocument": {
                                "Statement": [
                                {
                                    "Action": "s3:GetObject",
                                    "Effect": "Allow",
                                    "Resource": { "Fn::Join": [
                                        "",
                                        [
                                            "arn:aws:s3:::",
                                            {
                                                "Fn::ImportValue": {
                                                    "Fn::Join": [
                                                        "-",
                                                        [
                                                            {
                                                                "Ref": "ParentJumpboxStackName"
                                                            },
                                                            "KeyBucket"
                                                        ]
                                                    ]
                                                }
                                            },
                                            "/*"
                                        ]
                                      ]
                                      }
                                }
                            ]
                        }
                    },
                    {
                        "PolicyDocument": {
                            "Statement": [
                                {
                                    "Action": [
                                        "s3:GetBucketLocation",
                                        "s3:ListAllMyBuckets"
                                    ],
                                    "Effect": "Allow",
                                    "Resource": [
                                        "*"
                                    ]
                                },
                                {
                                    "Action": [
                                        "ec2:AllocateAddress",
                                        "ec2:AssociateAddress",
                                        "ec2:DescribeAddresses",
                                        "ec2:DisassociateAddress",
                                        "ec2:AttachVolume",
                                        "ec2:DescribeTags",
                                        "ec2:DescribeSecurityGroups",
                                        "ec2:RebootInstances",
                                        "ec2:StopInstances",
                                        "ec2:TerminateInstances"
                                    ],
                                    "Resource": [
                                        "*"
                                    ],
                                    "Effect": "Allow"
                                },
                                {
                                    "Action": [
                                        "cloudwatch:PutMetricAlarm",
                                        "cloudwatch:PutMetricData",
                                        "cloudwatch:Describe*"
                                    ],
                                    "Effect": "Allow",
                                    "Resource": [
                                        "*"
                                    ]
                                }
                            ]
                        },
                        "PolicyName": "Access_to_resources"
                    }
                ]
            },
            "Type": "AWS::IAM::Role"
        },
        "AppServerSecurityGroup": {
            "Properties": {
                "GroupDescription": "Enable SSH and HTTP access",
                "SecurityGroupIngress": [
                    {
                        "FromPort": "22",
                        "IpProtocol": "tcp",
                        "SourceSecurityGroupId": {
                            "Fn::ImportValue": {
                                "Fn::Join": [
                                    "-",
                                    [
                                        {
                                            "Ref": "ParentJumpboxStackName"
                                        },
                                        "JumpboxSG"
                                    ]
                                ]
                            }
                        },
                        "ToPort": "22"
                    },
                    {
                        "FromPort": "80",
                        "IpProtocol": "tcp",
                        "SourceSecurityGroupId": {
                            "Ref": "ELBSecurityGroup"
                        },
                        "ToPort": "80"
                    }
                ],
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": {
                            "Fn::Join" : [ "-", [ { "Ref": "EnvironmentName" }, "worker-sg" ] ]
                        }
                    },
                    {
                        "Key": "stage",
                        "Value": {
                            "Ref": "Stage"
                        }
                    },
                    {
                        "Key": "type",
                        "Value": {
                            "Fn::FindInMap": [
                                "constants",
                                "tags",
                                "type"
                            ]
                        }
                    },
                    {
                        "Key": "environment",
                        "Value": {
                            "Ref": "EnvironmentName"
                        }
                    }
                ],
                "VpcId": {
                    "Fn::ImportValue": {
                        "Fn::Join": [
                            "-",
                            [
                                {
                                    "Ref": "ParentVPCStackName"
                                },
                                "VPCID"
                            ]
                        ]
                    }
                }
            },
            "Type": "AWS::EC2::SecurityGroup"
        },
        "AppServerCondition": {
            "DependsOn": "LaunchConfig",
            "Properties": {
                "Handle": {
                    "Ref": "AppServerWaitHandle"
                },
                "Timeout": "1800"
            },
            "Type": "AWS::CloudFormation::WaitCondition"
        },
        "AppServerWaitHandle": {
            "Type": "AWS::CloudFormation::WaitConditionHandle"
        },
        "AlarmNotificationTopic": {
            "Properties": {
                "Subscription": [
                    {
                        "Endpoint": {
                            "Ref": "OperatorEmail"
                        },
                        "Protocol": "email"
                    }
                ]
            },
            "Type": "AWS::SNS::Topic"
        },
        "MAJORCPUAlarm": {
            "Properties": {
                "AlarmDescription": "CPU > 80% for 30 minutes",
                "ComparisonOperator": "GreaterThanThreshold",
                "Dimensions": [
                    {
                        "Name": "AutoScalingGroupName",
                        "Value": {
                            "Ref": "AutoScalingGroup"
                        }
                    }
                ],
                "EvaluationPeriods": "30",
                "MetricName": "CPUUtilization",
                "Namespace": "AWS/EC2",
                "InsufficientDataActions" : [
                    {
                        "Ref": "AlarmNotificationTopic"
                    }
                ],
                "OKActions": [
                    {
                        "Ref": "AlarmNotificationTopic"
                    }
                ],
                "AlarmActions": [
                    {
                        "Ref": "AlarmNotificationTopic"
                    }
                ],
                "Period": "60",
                "Statistic": "Average",
                "Threshold": "80",
                "Unit": "Percent"
            },
            "Type": "AWS::CloudWatch::Alarm"
        },
        "CRITICALMemoryAlarm": {
            "Properties": {
                "AlarmDescription": "Memory > 80% for 10 minutes",
                "ComparisonOperator": "GreaterThanThreshold",
                "EvaluationPeriods": "10",
                "MetricName": "MemoryUtilization",
                "Namespace": "System/Linux", 
                "Dimensions": [
                    {
                        "Name": "AutoScalingGroupName",
                        "Value": {
                            "Ref": "AutoScalingGroup"
                        }
                    }
                ],
                "InsufficientDataActions" : [
                    {
                        "Ref": "AlarmNotificationTopic"
                    }
                ],
                "OKActions": [
                    {
                        "Ref": "AlarmNotificationTopic"
                    }
                ],
                "AlarmActions": [
                    {
                        "Ref": "AlarmNotificationTopic"
                    }
                ],
                "Period": "60",
                "Statistic": "Average",
                "Threshold": "80"
            },
            "Type": "AWS::CloudWatch::Alarm"
        }
    },
    "Outputs": {
        "Environment": {
            "Value": {
                "Ref": "EnvironmentName"
            }
        },
        "InstanceId": {
            "Description": "InstanceId of the newly created EC2 instance",
            "Value": {
                "Ref": "LaunchConfig"
            }
        },
        "JumpboxSG": {
            "Description": "EC2 Jumpbox security group ID",
            "Value": {
                "Fn::ImportValue": {
                    "Fn::Join": [
                        "-",
                        [
                            {
                                "Ref": "ParentJumpboxStackName"
                            },
                            "JumpboxSG"
                        ]
                    ]
                }
            }
        },
        "Stage": {
            "Value": {
                "Ref": "Stage"
            }
        },
        "SubnetID": {
            "Description": "ID for the subnet",
            "Value": {
                "Fn::ImportValue": {
                  "Fn::Join": [
                    "-",
                    [
                      {
                        "Ref": "ParentSubnetStackName"
                      },
                      "PrivateSubnet1ID"
                    ]
                  ]
                }
              }
        },
        "Type": {
            "Value": {
                "Fn::FindInMap": [
                    "constants",
                    "tags",
                    "type"
                ]
            }
        },
        "VPCID": {
            "Description": "ID for the VPC",
            "Value": {
                "Fn::ImportValue": {
                    "Fn::Join": [
                        "-",
                        [
                            {
                                "Ref": "ParentVPCStackName"
                            },
                            "VPCID"
                        ]
                    ]
                }
            }
        },
        "Version": {
            "Value": {
                "Ref": "Version"
            }
        }
    }
}
